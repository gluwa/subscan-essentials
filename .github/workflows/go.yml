# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: subscan

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

      mysql:
        image: mysql:8.0.33
        env:
          MYSQL_DATABASE: subscan_test
          MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      # Set up golang env
      - name: Set up GO 1.20.5
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.5
        id: go
      # Checkout Go module directory
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      # Cache Go Modules
      - name: Cache Go Modules
        uses: actions/cache@v3
        env:
          cache-name: cache-go-modules
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Get Deps
      - name: Get dependencies
        run:  go mod download

      # Build packages
      - name: Build
        run: ./build.sh build

      # Trigger api tests when merge
      - name: Tests
        run: |
          cp configs/config.yaml.example configs/config.yaml
          go test -v -covermode=atomic -coverprofile=coverage.txt -coverpkg=$(go list ./... | tr "\n" ","_) ./...
        env:
          TEST_MOD: true

      - uses: codecov/codecov-action@v3
        if: env.CODECOV_TOKEN
        with:
          files: coverage.txt
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          args: --timeout=3m
