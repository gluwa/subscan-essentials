# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: subscan

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Start Redis & MySQL
        run: |
          sudo docker network create app_net
          sudo docker-compose -f docker-compose.db.yml up -d

      # Set up golang env
      - name: Set up GO 1.21.1
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.1
        id: go
      # Cache Go Modules
      - name: Cache Go Modules
        uses: actions/cache@v3
        env:
          cache-name: cache-go-modules
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Get Deps
      - name: Get dependencies
        run:  go mod download

      # Build packages
      - name: Build
        run: ./build.sh build

      # Trigger api tests when merge
      - name: Tests
        run: |
          cp configs/config.yaml.example configs/config.yaml

          sudo chmod -R a+rwx data/
          go test -v -covermode=atomic -coverprofile=coverage.txt -coverpkg=$(go list ./... | tr "\n" ","_) ./...
        env:
          TEST_MOD: true

      - uses: codecov/codecov-action@v3
        if: env.CODECOV_TOKEN
        with:
          files: coverage.txt
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          args: --timeout=3m
